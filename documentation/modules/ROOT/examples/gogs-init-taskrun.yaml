apiVersion: tekton.dev/v1beta1
kind: TaskRun
metadata:
  generateName: init-gogs-
spec:
  serviceAccountName: pipeline
  taskSpec:
    params:
      - name: GOGS_USER
        type: string
        description: Gogs admin username
        default: gogs
      - name: GOGS_PASSWORD
        type: string
        description: Gogs admin password
        default: gogs
      - name: REPO_URL
        type: string
        description: The GitHub Repository to use
        default: 'https://github.com/redhat-developer-demos/tekton-helloworld'
    stepTemplate:
      env:
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
    steps:
      - name: init-gogs
        #TODO #19 #18 update to official tekton oc python image
        image: quay.io/siamaksade/python-oc
        script: |
          #!/usr/bin/env python3

          import os
          import requests
          import json 

          gogs_user = "$(params.GOGS_USER)"
          gogs_pwd = "$(params.GOGS_PASSWORD)"
          gogsURL = "http://" + os.popen('oc get svc gogs  -o template --template="{{.spec.clusterIP}}"').read() + ":3000"

          # create admin user
          data_user = {
          'user_name': gogs_user,
          'password': gogs_pwd,
          'retype': gogs_pwd,
          'email': 'admin@gogs.com'
          }

          resp = requests.post(url = gogsURL + "/user/sign_up", data = data_user) 

          if resp.status_code != 200:
            print("Error creating Gogs admin (status code: {})".format(resp.status_code))
            print(resp.content)
          else:
            print("Created admin user {}:{}".format(gogs_user, gogs_pwd))

          # create git repo tekton-helloworld
          data_repo = '{"clone_addr": "$(params.REPO_URL)", "uid": 1, "repo_name": "tekton-helloworld"}'
          headers = {'Content-Type': 'application/json'}
          resp = requests.post(url = gogsURL + "/api/v1/repos/migrate", headers = headers, auth = (gogs_user, gogs_pwd), data = data_repo)  

          if resp.status_code != 200 and resp.status_code != 201:
            print("Error creating git repo (status code: {})".format(resp.status_code))
            print(resp.content)
          else:
            print("Created git repo tekton-helloworld")
            repoInfo = json.loads(str(resp.content,"utf8"))            
            print("Repository Clone url {0}".format(repoInfo['clone_url']))
